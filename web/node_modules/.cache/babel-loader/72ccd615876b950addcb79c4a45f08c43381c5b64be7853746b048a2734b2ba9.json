{"ast":null,"code":"\"use strict\";\n\nvar __classPrivateFieldSet = this && this.__classPrivateFieldSet || function (receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;\n};\nvar __classPrivateFieldGet = this && this.__classPrivateFieldGet || function (receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n};\nvar _Client_auth, _Client_logLevel, _Client_logger, _Client_prefixUrl, _Client_timeoutMs, _Client_notionVersion, _Client_fetch, _Client_agent, _Client_userAgent;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst logging_1 = require(\"./logging\");\nconst errors_1 = require(\"./errors\");\nconst helpers_1 = require(\"./helpers\");\nconst api_endpoints_1 = require(\"./api-endpoints\");\nconst node_fetch_1 = require(\"node-fetch\");\nconst package_json_1 = require(\"../package.json\");\nclass Client {\n  constructor(options) {\n    var _a, _b, _c, _d, _e, _f;\n    _Client_auth.set(this, void 0);\n    _Client_logLevel.set(this, void 0);\n    _Client_logger.set(this, void 0);\n    _Client_prefixUrl.set(this, void 0);\n    _Client_timeoutMs.set(this, void 0);\n    _Client_notionVersion.set(this, void 0);\n    _Client_fetch.set(this, void 0);\n    _Client_agent.set(this, void 0);\n    _Client_userAgent.set(this, void 0);\n    /*\n     * Notion API endpoints\n     */\n    this.blocks = {\n      /**\n       * Retrieve block\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getBlock.path(args),\n          method: api_endpoints_1.getBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update block\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateBlock.path(args),\n          method: api_endpoints_1.updateBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updateBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updateBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Delete block\n       */\n      delete: args => {\n        return this.request({\n          path: api_endpoints_1.deleteBlock.path(args),\n          method: api_endpoints_1.deleteBlock.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.deleteBlock.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.deleteBlock.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      children: {\n        /**\n         * Append block children\n         */\n        append: args => {\n          return this.request({\n            path: api_endpoints_1.appendBlockChildren.path(args),\n            method: api_endpoints_1.appendBlockChildren.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.appendBlockChildren.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.appendBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        },\n        /**\n         * Retrieve block children\n         */\n        list: args => {\n          return this.request({\n            path: api_endpoints_1.listBlockChildren.path(args),\n            method: api_endpoints_1.listBlockChildren.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.listBlockChildren.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.listBlockChildren.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.databases = {\n      /**\n       * List databases\n       *\n       * @deprecated Please use `search`\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listDatabases.path(),\n          method: api_endpoints_1.listDatabases.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.listDatabases.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.listDatabases.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Retrieve a database\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getDatabase.path(args),\n          method: api_endpoints_1.getDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Query a database\n       */\n      query: args => {\n        return this.request({\n          path: api_endpoints_1.queryDatabase.path(args),\n          method: api_endpoints_1.queryDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.queryDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.queryDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Create a database\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createDatabase.path(),\n          method: api_endpoints_1.createDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.createDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.createDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update a database\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updateDatabase.path(args),\n          method: api_endpoints_1.updateDatabase.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updateDatabase.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updateDatabase.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    this.pages = {\n      /**\n       * Create a page\n       */\n      create: args => {\n        return this.request({\n          path: api_endpoints_1.createPage.path(),\n          method: api_endpoints_1.createPage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.createPage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.createPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Retrieve a page\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getPage.path(args),\n          method: api_endpoints_1.getPage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getPage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getPage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Update page properties\n       */\n      update: args => {\n        return this.request({\n          path: api_endpoints_1.updatePage.path(args),\n          method: api_endpoints_1.updatePage.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.updatePage.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.updatePage.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      properties: {\n        /**\n         * Retrieve page property\n         */\n        retrieve: args => {\n          return this.request({\n            path: api_endpoints_1.getPageProperty.path(args),\n            method: api_endpoints_1.getPageProperty.method,\n            query: (0, helpers_1.pick)(args, api_endpoints_1.getPageProperty.queryParams),\n            body: (0, helpers_1.pick)(args, api_endpoints_1.getPageProperty.bodyParams),\n            auth: args === null || args === void 0 ? void 0 : args.auth\n          });\n        }\n      }\n    };\n    this.users = {\n      /**\n       * Retrieve a user\n       */\n      retrieve: args => {\n        return this.request({\n          path: api_endpoints_1.getUser.path(args),\n          method: api_endpoints_1.getUser.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getUser.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getUser.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * List all users\n       */\n      list: args => {\n        return this.request({\n          path: api_endpoints_1.listUsers.path(),\n          method: api_endpoints_1.listUsers.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.listUsers.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.listUsers.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      },\n      /**\n       * Get details about bot\n       */\n      me: args => {\n        return this.request({\n          path: api_endpoints_1.getSelf.path(),\n          method: api_endpoints_1.getSelf.method,\n          query: (0, helpers_1.pick)(args, api_endpoints_1.getSelf.queryParams),\n          body: (0, helpers_1.pick)(args, api_endpoints_1.getSelf.bodyParams),\n          auth: args === null || args === void 0 ? void 0 : args.auth\n        });\n      }\n    };\n    __classPrivateFieldSet(this, _Client_auth, options === null || options === void 0 ? void 0 : options.auth, \"f\");\n    __classPrivateFieldSet(this, _Client_logLevel, (_a = options === null || options === void 0 ? void 0 : options.logLevel) !== null && _a !== void 0 ? _a : logging_1.LogLevel.WARN, \"f\");\n    __classPrivateFieldSet(this, _Client_logger, (_b = options === null || options === void 0 ? void 0 : options.logger) !== null && _b !== void 0 ? _b : (0, logging_1.makeConsoleLogger)(package_json_1.name), \"f\");\n    __classPrivateFieldSet(this, _Client_prefixUrl, ((_c = options === null || options === void 0 ? void 0 : options.baseUrl) !== null && _c !== void 0 ? _c : \"https://api.notion.com\") + \"/v1/\", \"f\");\n    __classPrivateFieldSet(this, _Client_timeoutMs, (_d = options === null || options === void 0 ? void 0 : options.timeoutMs) !== null && _d !== void 0 ? _d : 60000, \"f\");\n    __classPrivateFieldSet(this, _Client_notionVersion, (_e = options === null || options === void 0 ? void 0 : options.notionVersion) !== null && _e !== void 0 ? _e : Client.defaultNotionVersion, \"f\");\n    __classPrivateFieldSet(this, _Client_fetch, (_f = options === null || options === void 0 ? void 0 : options.fetch) !== null && _f !== void 0 ? _f : node_fetch_1.default, \"f\");\n    __classPrivateFieldSet(this, _Client_agent, options === null || options === void 0 ? void 0 : options.agent, \"f\");\n    __classPrivateFieldSet(this, _Client_userAgent, `notionhq-client/${package_json_1.version}`, \"f\");\n  }\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  async request({\n    path,\n    method,\n    query,\n    body,\n    auth\n  }) {\n    this.log(logging_1.LogLevel.INFO, \"request start\", {\n      method,\n      path\n    });\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString = !body || Object.entries(body).length === 0 ? undefined : JSON.stringify(body);\n    const url = new URL(`${__classPrivateFieldGet(this, _Client_prefixUrl, \"f\")}${path}`);\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value));\n        }\n      }\n    }\n    const headers = {\n      ...this.authAsHeaders(auth),\n      \"Notion-Version\": __classPrivateFieldGet(this, _Client_notionVersion, \"f\"),\n      \"user-agent\": __classPrivateFieldGet(this, _Client_userAgent, \"f\")\n    };\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\";\n    }\n    try {\n      const response = await errors_1.RequestTimeoutError.rejectAfterTimeout(__classPrivateFieldGet(this, _Client_fetch, \"f\").call(this, url.toString(), {\n        method,\n        headers,\n        body: bodyAsJsonString,\n        agent: __classPrivateFieldGet(this, _Client_agent, \"f\")\n      }), __classPrivateFieldGet(this, _Client_timeoutMs, \"f\"));\n      const responseText = await response.text();\n      if (!response.ok) {\n        throw (0, errors_1.buildRequestError)(response, responseText);\n      }\n      const responseJson = JSON.parse(responseText);\n      this.log(logging_1.LogLevel.INFO, `request success`, {\n        method,\n        path\n      });\n      return responseJson;\n    } catch (error) {\n      if (!(0, errors_1.isNotionClientError)(error)) {\n        throw error;\n      }\n      // Log the error if it's one of our known error types\n      this.log(logging_1.LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message\n      });\n      if ((0, errors_1.isHTTPResponseError)(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(logging_1.LogLevel.DEBUG, `failed response body`, {\n          body: error.body\n        });\n      }\n      throw error;\n    }\n  }\n  /**\n   * Search\n   */\n  search(args) {\n    return this.request({\n      path: api_endpoints_1.search.path(),\n      method: api_endpoints_1.search.method,\n      query: (0, helpers_1.pick)(args, api_endpoints_1.search.queryParams),\n      body: (0, helpers_1.pick)(args, api_endpoints_1.search.bodyParams),\n      auth: args === null || args === void 0 ? void 0 : args.auth\n    });\n  }\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  log(level, message, extraInfo) {\n    if ((0, logging_1.logLevelSeverity)(level) >= (0, logging_1.logLevelSeverity)(__classPrivateFieldGet(this, _Client_logLevel, \"f\"))) {\n      __classPrivateFieldGet(this, _Client_logger, \"f\").call(this, level, message, extraInfo);\n    }\n  }\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  authAsHeaders(auth) {\n    const headers = {};\n    const authHeaderValue = auth !== null && auth !== void 0 ? auth : __classPrivateFieldGet(this, _Client_auth, \"f\");\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`;\n    }\n    return headers;\n  }\n}\nexports.default = Client;\n_Client_auth = new WeakMap(), _Client_logLevel = new WeakMap(), _Client_logger = new WeakMap(), _Client_prefixUrl = new WeakMap(), _Client_timeoutMs = new WeakMap(), _Client_notionVersion = new WeakMap(), _Client_fetch = new WeakMap(), _Client_agent = new WeakMap(), _Client_userAgent = new WeakMap();\nClient.defaultNotionVersion = \"2022-02-22\";","map":{"version":3,"names":["logging_1","require","errors_1","helpers_1","api_endpoints_1","node_fetch_1","package_json_1","Client","constructor","options","_Client_auth","set","_Client_logLevel","_Client_logger","_Client_prefixUrl","_Client_timeoutMs","_Client_notionVersion","_Client_fetch","_Client_agent","_Client_userAgent","blocks","retrieve","args","request","path","getBlock","method","query","pick","queryParams","body","bodyParams","auth","update","updateBlock","delete","deleteBlock","children","append","appendBlockChildren","list","listBlockChildren","databases","listDatabases","getDatabase","queryDatabase","create","createDatabase","updateDatabase","pages","createPage","getPage","updatePage","properties","getPageProperty","users","getUser","listUsers","me","getSelf","__classPrivateFieldSet","_a","logLevel","LogLevel","WARN","_b","logger","makeConsoleLogger","name","_c","baseUrl","_d","timeoutMs","_e","notionVersion","defaultNotionVersion","_f","fetch","default","agent","version","log","INFO","bodyAsJsonString","Object","entries","length","undefined","JSON","stringify","url","URL","__classPrivateFieldGet","key","value","searchParams","String","headers","authAsHeaders","response","RequestTimeoutError","rejectAfterTimeout","call","toString","responseText","text","ok","buildRequestError","responseJson","parse","error","isNotionClientError","code","message","isHTTPResponseError","DEBUG","search","level","extraInfo","logLevelSeverity","authHeaderValue","exports"],"sources":["/Users/isa/Desktop/notion-recipes/node_modules/@notionhq/client/src/Client.ts"],"sourcesContent":["import type { Agent } from \"http\"\nimport {\n  Logger,\n  LogLevel,\n  logLevelSeverity,\n  makeConsoleLogger,\n} from \"./logging\"\nimport {\n  buildRequestError,\n  isHTTPResponseError,\n  isNotionClientError,\n  RequestTimeoutError,\n} from \"./errors\"\nimport { pick } from \"./helpers\"\nimport {\n  GetBlockParameters,\n  GetBlockResponse,\n  getBlock,\n  UpdateBlockParameters,\n  UpdateBlockResponse,\n  updateBlock,\n  DeleteBlockParameters,\n  DeleteBlockResponse,\n  deleteBlock,\n  AppendBlockChildrenParameters,\n  AppendBlockChildrenResponse,\n  appendBlockChildren,\n  ListBlockChildrenParameters,\n  ListBlockChildrenResponse,\n  listBlockChildren,\n  ListDatabasesParameters,\n  ListDatabasesResponse,\n  listDatabases,\n  GetDatabaseParameters,\n  GetDatabaseResponse,\n  getDatabase,\n  QueryDatabaseParameters,\n  QueryDatabaseResponse,\n  queryDatabase,\n  CreateDatabaseParameters,\n  CreateDatabaseResponse,\n  createDatabase,\n  UpdateDatabaseParameters,\n  UpdateDatabaseResponse,\n  updateDatabase,\n  CreatePageParameters,\n  CreatePageResponse,\n  createPage,\n  GetPageParameters,\n  GetPageResponse,\n  getPage,\n  UpdatePageParameters,\n  UpdatePageResponse,\n  updatePage,\n  GetUserParameters,\n  GetUserResponse,\n  getUser,\n  ListUsersParameters,\n  ListUsersResponse,\n  listUsers,\n  SearchParameters,\n  SearchResponse,\n  search,\n  GetSelfParameters,\n  GetSelfResponse,\n  getSelf,\n  GetPagePropertyParameters,\n  GetPagePropertyResponse,\n  getPageProperty,\n} from \"./api-endpoints\"\nimport nodeFetch from \"node-fetch\"\nimport {\n  version as PACKAGE_VERSION,\n  name as PACKAGE_NAME,\n} from \"../package.json\"\nimport { SupportedFetch } from \"./fetch-types\"\n\nexport interface ClientOptions {\n  auth?: string\n  timeoutMs?: number\n  baseUrl?: string\n  logLevel?: LogLevel\n  logger?: Logger\n  notionVersion?: string\n  fetch?: SupportedFetch\n  /** Silently ignored in the browser */\n  agent?: Agent\n}\n\nexport interface RequestParameters {\n  path: string\n  method: Method\n  query?: QueryParams\n  body?: Record<string, unknown>\n  auth?: string\n}\n\nexport default class Client {\n  #auth?: string\n  #logLevel: LogLevel\n  #logger: Logger\n  #prefixUrl: string\n  #timeoutMs: number\n  #notionVersion: string\n  #fetch: SupportedFetch\n  #agent: Agent | undefined\n  #userAgent: string\n\n  static readonly defaultNotionVersion = \"2022-02-22\"\n\n  public constructor(options?: ClientOptions) {\n    this.#auth = options?.auth\n    this.#logLevel = options?.logLevel ?? LogLevel.WARN\n    this.#logger = options?.logger ?? makeConsoleLogger(PACKAGE_NAME)\n    this.#prefixUrl = (options?.baseUrl ?? \"https://api.notion.com\") + \"/v1/\"\n    this.#timeoutMs = options?.timeoutMs ?? 60_000\n    this.#notionVersion = options?.notionVersion ?? Client.defaultNotionVersion\n    this.#fetch = options?.fetch ?? nodeFetch\n    this.#agent = options?.agent\n    this.#userAgent = `notionhq-client/${PACKAGE_VERSION}`\n  }\n\n  /**\n   * Sends a request.\n   *\n   * @param path\n   * @param method\n   * @param query\n   * @param body\n   * @returns\n   */\n  public async request<ResponseBody>({\n    path,\n    method,\n    query,\n    body,\n    auth,\n  }: RequestParameters): Promise<ResponseBody> {\n    this.log(LogLevel.INFO, \"request start\", { method, path })\n\n    // If the body is empty, don't send the body in the HTTP request\n    const bodyAsJsonString =\n      !body || Object.entries(body).length === 0\n        ? undefined\n        : JSON.stringify(body)\n\n    const url = new URL(`${this.#prefixUrl}${path}`)\n    if (query) {\n      for (const [key, value] of Object.entries(query)) {\n        if (value !== undefined) {\n          url.searchParams.append(key, String(value))\n        }\n      }\n    }\n\n    const headers: Record<string, string> = {\n      ...this.authAsHeaders(auth),\n      \"Notion-Version\": this.#notionVersion,\n      \"user-agent\": this.#userAgent,\n    }\n\n    if (bodyAsJsonString !== undefined) {\n      headers[\"content-type\"] = \"application/json\"\n    }\n    try {\n      const response = await RequestTimeoutError.rejectAfterTimeout(\n        this.#fetch(url.toString(), {\n          method,\n          headers,\n          body: bodyAsJsonString,\n          agent: this.#agent,\n        }),\n        this.#timeoutMs\n      )\n\n      const responseText = await response.text()\n      if (!response.ok) {\n        throw buildRequestError(response, responseText)\n      }\n\n      const responseJson: ResponseBody = JSON.parse(responseText)\n      this.log(LogLevel.INFO, `request success`, { method, path })\n      return responseJson\n    } catch (error: unknown) {\n      if (!isNotionClientError(error)) {\n        throw error\n      }\n\n      // Log the error if it's one of our known error types\n      this.log(LogLevel.WARN, `request fail`, {\n        code: error.code,\n        message: error.message,\n      })\n\n      if (isHTTPResponseError(error)) {\n        // The response body may contain sensitive information so it is logged separately at the DEBUG level\n        this.log(LogLevel.DEBUG, `failed response body`, {\n          body: error.body,\n        })\n      }\n\n      throw error\n    }\n  }\n\n  /*\n   * Notion API endpoints\n   */\n\n  public readonly blocks = {\n    /**\n     * Retrieve block\n     */\n    retrieve: (\n      args: WithAuth<GetBlockParameters>\n    ): Promise<GetBlockResponse> => {\n      return this.request<GetBlockResponse>({\n        path: getBlock.path(args),\n        method: getBlock.method,\n        query: pick(args, getBlock.queryParams),\n        body: pick(args, getBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update block\n     */\n    update: (\n      args: WithAuth<UpdateBlockParameters>\n    ): Promise<UpdateBlockResponse> => {\n      return this.request<UpdateBlockResponse>({\n        path: updateBlock.path(args),\n        method: updateBlock.method,\n        query: pick(args, updateBlock.queryParams),\n        body: pick(args, updateBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Delete block\n     */\n    delete: (\n      args: WithAuth<DeleteBlockParameters>\n    ): Promise<DeleteBlockResponse> => {\n      return this.request<DeleteBlockResponse>({\n        path: deleteBlock.path(args),\n        method: deleteBlock.method,\n        query: pick(args, deleteBlock.queryParams),\n        body: pick(args, deleteBlock.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    children: {\n      /**\n       * Append block children\n       */\n      append: (\n        args: WithAuth<AppendBlockChildrenParameters>\n      ): Promise<AppendBlockChildrenResponse> => {\n        return this.request<AppendBlockChildrenResponse>({\n          path: appendBlockChildren.path(args),\n          method: appendBlockChildren.method,\n          query: pick(args, appendBlockChildren.queryParams),\n          body: pick(args, appendBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n\n      /**\n       * Retrieve block children\n       */\n      list: (\n        args: WithAuth<ListBlockChildrenParameters>\n      ): Promise<ListBlockChildrenResponse> => {\n        return this.request<ListBlockChildrenResponse>({\n          path: listBlockChildren.path(args),\n          method: listBlockChildren.method,\n          query: pick(args, listBlockChildren.queryParams),\n          body: pick(args, listBlockChildren.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly databases = {\n    /**\n     * List databases\n     *\n     * @deprecated Please use `search`\n     */\n    list: (\n      args: WithAuth<ListDatabasesParameters>\n    ): Promise<ListDatabasesResponse> => {\n      return this.request<ListDatabasesResponse>({\n        path: listDatabases.path(),\n        method: listDatabases.method,\n        query: pick(args, listDatabases.queryParams),\n        body: pick(args, listDatabases.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a database\n     */\n    retrieve: (\n      args: WithAuth<GetDatabaseParameters>\n    ): Promise<GetDatabaseResponse> => {\n      return this.request<GetDatabaseResponse>({\n        path: getDatabase.path(args),\n        method: getDatabase.method,\n        query: pick(args, getDatabase.queryParams),\n        body: pick(args, getDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Query a database\n     */\n    query: (\n      args: WithAuth<QueryDatabaseParameters>\n    ): Promise<QueryDatabaseResponse> => {\n      return this.request<QueryDatabaseResponse>({\n        path: queryDatabase.path(args),\n        method: queryDatabase.method,\n        query: pick(args, queryDatabase.queryParams),\n        body: pick(args, queryDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Create a database\n     */\n    create: (\n      args: WithAuth<CreateDatabaseParameters>\n    ): Promise<CreateDatabaseResponse> => {\n      return this.request<CreateDatabaseResponse>({\n        path: createDatabase.path(),\n        method: createDatabase.method,\n        query: pick(args, createDatabase.queryParams),\n        body: pick(args, createDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update a database\n     */\n    update: (\n      args: WithAuth<UpdateDatabaseParameters>\n    ): Promise<UpdateDatabaseResponse> => {\n      return this.request<UpdateDatabaseResponse>({\n        path: updateDatabase.path(args),\n        method: updateDatabase.method,\n        query: pick(args, updateDatabase.queryParams),\n        body: pick(args, updateDatabase.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  public readonly pages = {\n    /**\n     * Create a page\n     */\n    create: (\n      args: WithAuth<CreatePageParameters>\n    ): Promise<CreatePageResponse> => {\n      return this.request<CreatePageResponse>({\n        path: createPage.path(),\n        method: createPage.method,\n        query: pick(args, createPage.queryParams),\n        body: pick(args, createPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Retrieve a page\n     */\n    retrieve: (args: WithAuth<GetPageParameters>): Promise<GetPageResponse> => {\n      return this.request<GetPageResponse>({\n        path: getPage.path(args),\n        method: getPage.method,\n        query: pick(args, getPage.queryParams),\n        body: pick(args, getPage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Update page properties\n     */\n    update: (\n      args: WithAuth<UpdatePageParameters>\n    ): Promise<UpdatePageResponse> => {\n      return this.request<UpdatePageResponse>({\n        path: updatePage.path(args),\n        method: updatePage.method,\n        query: pick(args, updatePage.queryParams),\n        body: pick(args, updatePage.bodyParams),\n        auth: args?.auth,\n      })\n    },\n    properties: {\n      /**\n       * Retrieve page property\n       */\n      retrieve: (\n        args: WithAuth<GetPagePropertyParameters>\n      ): Promise<GetPagePropertyResponse> => {\n        return this.request<GetPagePropertyResponse>({\n          path: getPageProperty.path(args),\n          method: getPageProperty.method,\n          query: pick(args, getPageProperty.queryParams),\n          body: pick(args, getPageProperty.bodyParams),\n          auth: args?.auth,\n        })\n      },\n    },\n  }\n\n  public readonly users = {\n    /**\n     * Retrieve a user\n     */\n    retrieve: (args: WithAuth<GetUserParameters>): Promise<GetUserResponse> => {\n      return this.request<GetUserResponse>({\n        path: getUser.path(args),\n        method: getUser.method,\n        query: pick(args, getUser.queryParams),\n        body: pick(args, getUser.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * List all users\n     */\n    list: (args: WithAuth<ListUsersParameters>): Promise<ListUsersResponse> => {\n      return this.request<ListUsersResponse>({\n        path: listUsers.path(),\n        method: listUsers.method,\n        query: pick(args, listUsers.queryParams),\n        body: pick(args, listUsers.bodyParams),\n        auth: args?.auth,\n      })\n    },\n\n    /**\n     * Get details about bot\n     */\n    me: (args: WithAuth<GetSelfParameters>): Promise<GetSelfResponse> => {\n      return this.request<GetSelfResponse>({\n        path: getSelf.path(),\n        method: getSelf.method,\n        query: pick(args, getSelf.queryParams),\n        body: pick(args, getSelf.bodyParams),\n        auth: args?.auth,\n      })\n    },\n  }\n\n  /**\n   * Search\n   */\n  public search(args: WithAuth<SearchParameters>): Promise<SearchResponse> {\n    return this.request<SearchResponse>({\n      path: search.path(),\n      method: search.method,\n      query: pick(args, search.queryParams),\n      body: pick(args, search.bodyParams),\n      auth: args?.auth,\n    })\n  }\n\n  /**\n   * Emits a log message to the console.\n   *\n   * @param level The level for this message\n   * @param args Arguments to send to the console\n   */\n  private log(\n    level: LogLevel,\n    message: string,\n    extraInfo: Record<string, unknown>\n  ) {\n    if (logLevelSeverity(level) >= logLevelSeverity(this.#logLevel)) {\n      this.#logger(level, message, extraInfo)\n    }\n  }\n\n  /**\n   * Transforms an API key or access token into a headers object suitable for an HTTP request.\n   *\n   * This method uses the instance's value as the default when the input is undefined. If neither are defined, it returns\n   * an empty object\n   *\n   * @param auth API key or access token\n   * @returns headers key-value object\n   */\n  private authAsHeaders(auth?: string): Record<string, string> {\n    const headers: Record<string, string> = {}\n    const authHeaderValue = auth ?? this.#auth\n    if (authHeaderValue !== undefined) {\n      headers[\"authorization\"] = `Bearer ${authHeaderValue}`\n    }\n    return headers\n  }\n}\n\n/*\n * Type aliases to support the generic request interface.\n */\ntype Method = \"get\" | \"post\" | \"patch\" | \"delete\"\ntype QueryParams = Record<string, string | number> | URLSearchParams\n\ntype WithAuth<P> = P & { auth?: string }\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}